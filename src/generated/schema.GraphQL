### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  city: String
  country: Country
  countyCode: String
  createdAt: DateTime!
  lat: Float
  lineOne: String
  lineTwo: String
  lng: Float
  updatedAt: DateTime!
  zip: String
}

type Agent {
  createdAt: DateTime!
  id: Int!
  leasableUnit: LeasableUnit
  updatedAt: DateTime!
  user: User
}

type AuthPayload {
  token: String
  user: User
}

type Company {
  bio: String
  contactPerson: String
  email: String
  id: Int!
  name: String
  roleId: Int
  roles: [Role!]!
  website: String
}

type Country {
  fipsCode: String
  id: Int
  longCode: String
  name: String
  shortCode: String
  states: [State!]
}

type County {
  fipsCode: Int!
  id: Int!
  name: String!
  state: State
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type LeasableUnit {
  address: Address
  agents: [Agent]
  baseRent: Float
  businessKey: String
  ceilingHeightInches: Int
  dateAvailable: DateTime
  description: String
  externalNotes: String
  flyer: String
  hasDockDoor: Boolean
  hasDriveThru: Boolean
  hasGreaseTrap: Boolean
  id: Int!
  image: String
  isInPortfolio: Boolean
  isListed: Boolean!
  leasableUnitSubType: LeasableUnitSubType
  monthlyCost: Float
  name: String
  nnnRent: Float
  occupancyStatus: Int
  organization: Organization
  plan: String
  productType: ProductType
  renderUrl: String
  squareFeet: Int
  squareFeetIsEstimate: Boolean
  squareFootCost: Float
  totalRent: Float
}

type LeasableUnitConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [LeasableUnitEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type LeasableUnitEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: LeasableUnit
}

type LeasableUnitSubType {
  createdAt: DateTime!
  id: Int!
  leasableUnitType: LeasableUnitType
  leasableUnits: [LeasableUnit!]
  name: String
  updatedAt: DateTime!
}

type LeasableUnitType {
  createdAt: DateTime!
  id: Int!
  leasableUnitSubTypes: [LeasableUnitSubType!]
  leasableUnits: [LeasableUnit!]
  name: String
  updatedAt: DateTime!
}

type Mutation {
  agreeDisclaimer(acceptedDisclaimerAt: DateTime): User
  login(email: String!, password: String): AuthPayload
  signup(email: String!, name: String, password: String): AuthPayload
}

type Organization {
  address: Address
  createdAt: DateTime!
  dAndBNumber: String
  demographicRequirement: Int
  fein: String
  generalRequirements: String
  id: Int!
  industryCategory: String
  isActive: Boolean
  isBrokerage: Boolean
  leasableUnit: LeasableUnit
  leaseRequirement: Int
  logo: String
  mainPhone: String
  name: String
  notes: String
  registeredAgent: String
  siteRequirement: Int
  stateAffiliation: String
  stateBusinessEntityNumber: String
  stockTicker: String
  unitRequirement: Int
  updatedAt: DateTime!
  website: String
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Place {
  fipsCode: Int!
  id: Int!
  name: String!
  state: State
}

type ProductType {
  LeasableUnit: [LeasableUnit]
  Property: [Property]
  SiteRequirement: String
  createdAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
}

type Property {
  businessKey: String!
  name: String!
  productType: Int!
}

type Query {
  addresses: [Address]
  leasableUnits: [LeasableUnit]
  leasableUnitsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): LeasableUnitConnection
  me: User
}

type Role {
  company: Company
  id: Int!
  name: String
  skills: [Skill]
}

type Skill {
  id: Int!
  name: String
  role: Role
}

type State {
  counties: [County!]
  country: Country
  fipsCode: Int!
  id: Int!
  name: String!
  places: [Place!]
}

type User {
  acceptedDisclaimerAt: DateTime
  accountType: Int
  alternateCellPhone: String
  alternateEmail: String
  currentSignInAt: DateTime
  email: String!
  firstName: String
  id: Int!
  isBroker: Boolean
  lastName: String
  officePhone: String
  organization: Int
  personType: Int
  picture: String
  primaryCellPhone: String
  signInCount: Int
}
